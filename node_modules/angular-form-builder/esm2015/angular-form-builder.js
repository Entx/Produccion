import { Injectable, Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule, MatCheckboxModule, MatCardModule, MatRadioModule, MatSelectModule } from '@angular/material';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormControlService {
    constructor() {
        this.validators = {
            email: () => Validators.email,
            required: () => Validators.required,
            min: min => Validators.min(min),
            max: max => Validators.max(max),
            pattern: pattern => Validators.pattern(pattern),
            minLength: minLength => Validators.minLength(minLength),
            maxLength: maxLength => Validators.maxLength(maxLength),
        };
    }
    /**
     * @param {?} questions
     * @return {?}
     */
    toFormGroup(questions) {
        const /** @type {?} */ group = {};
        questions.forEach(question => question.controlType == 'checkboxGroup' ?
            group[question.key] = this.createFormGroup(question) : group[question.key] = this.createFormControl(question));
        return new FormGroup(group);
    }
    /**
     * @param {?} question
     * @return {?}
     */
    createFormControl(question) {
        const /** @type {?} */ state = {
            value: question.value || '',
            disabled: question.disabled,
        };
        let /** @type {?} */ validatorOpts;
        if (question.validators) {
            validatorOpts = this.getValidators(question.validators);
        }
        return new FormControl(state, validatorOpts);
    }
    /**
     * @param {?} question
     * @return {?}
     */
    createFormGroup(question) {
        const /** @type {?} */ group = {};
        question.options.forEach(option => {
            const /** @type {?} */ obj = {
                key: option.key,
                value: option.value,
                disabled: question.disabled,
                validators: question.validators,
            };
            group[option.key] = this.createFormControl(obj);
        });
        return new FormGroup(group);
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    getValidators(validators) {
        const /** @type {?} */ validatorOpts = new Array();
        Object.keys(validators).forEach(key => {
            if (validators[key]) {
                validatorOpts.push(this.validators[key](validators[key]));
            }
        });
        return validatorOpts;
    }
}
FormControlService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
FormControlService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormBuilderComponent {
    /**
     * @param {?} qcs
     */
    constructor(qcs) {
        this.qcs = qcs;
        this.questions = [];
        this.disableButtons = false;
        this.formSubmit = new EventEmitter();
        this.formReset = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = this.qcs.toFormGroup(this.questions);
    }
    /**
     * @return {?}
     */
    onReset() {
        this.form.reset();
        this.form = this.qcs.toFormGroup(this.questions);
        this.formReset.emit(this.form);
    }
}
FormBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-form-builder',
                template: `<mat-card>
  <mat-card-header>
    <mat-card-title>
      <b>{{title}}</b>
    </mat-card-title>
  </mat-card-header>
  <form (ngSubmit)="formSubmit.emit(form)" [formGroup]="form">
    <mat-card-content>
      <div *ngFor="let question of questions">
        <app-question [question]="question" [form]="form"></app-question>
      </div>
    </mat-card-content>
    <mat-card-actions>
      <button id=submit type="submit" mat-button [disabled]="!form.valid || disableButtons">SAVE</button>
      <button [disabled]="disableButtons" type="button" mat-button (click)="onReset()">RESET</button>
      <ng-content></ng-content>
    </mat-card-actions>
  </form>
</mat-card>`,
                providers: [FormControlService],
            },] },
];
/** @nocollapse */
FormBuilderComponent.ctorParameters = () => [
    { type: FormControlService, },
];
FormBuilderComponent.propDecorators = {
    "title": [{ type: Input },],
    "questions": [{ type: Input },],
    "disableButtons": [{ type: Input },],
    "formSubmit": [{ type: Output },],
    "formReset": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormViewerComponent {
    /**
     * @param {?} qcs
     */
    constructor(qcs) {
        this.qcs = qcs;
        this.questions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.questions.forEach(question => {
            question.disabled = true;
            question.hintLabel = null;
        });
        this.form = this.qcs.toFormGroup(this.questions);
    }
}
FormViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-form-viewer',
                template: `<div *ngFor="let question of questions">
    <app-question [question]="question" [form]="form"></app-question>
</div>`,
                providers: [FormControlService],
            },] },
];
/** @nocollapse */
FormViewerComponent.ctorParameters = () => [
    { type: FormControlService, },
];
FormViewerComponent.propDecorators = {
    "questions": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicFormQuestionComponent {
}
DynamicFormQuestionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-question',
                template: `<div [formGroup]="form">
  <div [ngSwitch]="question.controlType">
    <!-- Input field -->
    <div *ngSwitchCase="'input'">
      <mat-form-field [hintLabel]="question.hintLabel" class="full-width">
        <input matInput [formControlName]="question.key" [id]="question.key" [type]="question.dataType" [placeholder]="question.label">
      </mat-form-field>
    </div>
    <!-- Radio button -->
    <div class="padding" *ngSwitchCase="'radio'">
      <label>{{question.label}}</label>
      <mat-radio-group [formControlName]="question.key">
        <mat-radio-button *ngFor="let option of question.options " color="primary" class="side-margin" [value]="option.key">{{option.value}}</mat-radio-button>
      </mat-radio-group>
    </div>
    <!-- Checkboxes -->
    <div *ngSwitchCase="'checkbox'">
      <mat-checkbox class="side-margin" [formControlName]="question.key" [(ngModel)]="question.value">{{question.label}}</mat-checkbox>
    </div>
    <!-- Dropdown -->
    <mat-form-field *ngSwitchCase="'select'">
      <mat-select [id]="question.key" [placeholder]="question.label" [formControlName]="question.key" [ngModel]="question.value">
        <mat-option *ngFor="let option of question.options" [value]="option.key">
          {{ option.value }}
        </mat-option>
      </mat-select>
      <mat-hint>{{question.hintLabel }}</mat-hint>
    </mat-form-field>
    <!-- Checkbox group -->
    <div [formGroupName]="question.key" *ngSwitchCase="'checkboxGroup'">
      <div class="container">
        <label>{{question.label}}</label>
        <div *ngFor="let option of question.options" flex="20">
          <mat-checkbox class="side-margin" [formControlName]="option.key" [(ngModel)]=option.value>{{option.label}}</mat-checkbox>
        </div>
      </div>
    </div>
  </div>
</div>
`,
                styles: [
                    `.full-width {
        width: 100%
      }
      .side-margin {
        margin: 0 10px;
      }
      .padding {
        padding-bottom: 1.25em;
      }
      .container {
        display: flex;
      }
      `,
                ],
            },] },
];
/** @nocollapse */
DynamicFormQuestionComponent.ctorParameters = () => [];
DynamicFormQuestionComponent.propDecorators = {
    "question": [{ type: Input },],
    "form": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AppMaterialModule {
}
AppMaterialModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    MatButtonModule,
                    MatCheckboxModule,
                    MatCardModule,
                    MatInputModule,
                    MatFormFieldModule,
                    MatRadioModule,
                    MatSelectModule,
                ],
                exports: [
                    MatButtonModule,
                    MatCheckboxModule,
                    MatCardModule,
                    MatInputModule,
                    MatFormFieldModule,
                    MatRadioModule,
                    MatSelectModule,
                ],
            },] },
];
/** @nocollapse */
AppMaterialModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormBuilderModule {
}
FormBuilderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ReactiveFormsModule, AppMaterialModule],
                declarations: [
                    FormBuilderComponent,
                    DynamicFormQuestionComponent,
                    FormViewerComponent,
                ],
                exports: [FormBuilderComponent, FormViewerComponent],
            },] },
];
/** @nocollapse */
FormBuilderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { FormBuilderModule, AppMaterialModule as ɵa, FormBuilderComponent as ɵb, FormViewerComponent as ɵe, DynamicFormQuestionComponent as ɵd, FormControlService as ɵc };
//# sourceMappingURL=angular-form-builder.js.map
