{
  "version": 3,
  "file": "angular-form-builder.js",
  "sources": [
    "ng://angular-form-builder/out/src/app/modules/form-builder/form-builder.module.ts",
    "ng://angular-form-builder/out/src/app/modules/app-material.module.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/dynamic-form-question/dynamic-form-question.component.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/components/form-viewer/form-viewer.component.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/components/form-builder/form-builder.component.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/form-controls/form-control.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilderComponent } from './components/form-builder/form-builder.component';\r\nimport { FormViewerComponent } from './components/form-viewer/form-viewer.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { DynamicFormQuestionComponent } from './dynamic-form-question/dynamic-form-question.component';\r\nimport { AppMaterialModule } from '../app-material.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule, AppMaterialModule],\r\n  declarations: [\r\n    FormBuilderComponent,\r\n    DynamicFormQuestionComponent,\r\n    FormViewerComponent,\r\n  ],\r\n  exports: [FormBuilderComponent, FormViewerComponent],\r\n})\r\nexport class FormBuilderModule {}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport {\r\n  MatButtonModule,\r\n  MatCheckboxModule,\r\n  MatCardModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n} from '@angular/material';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n  ],\r\n  exports: [\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n  ],\r\n})\r\nexport class AppMaterialModule { }\r\n",
    "import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlBase } from '../form-controls/form-control-base';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  template: `<div [formGroup]=\"form\">\r\n\r\n  <div [ngSwitch]=\"question.controlType\">\r\n\r\n    <!-- Input field -->\r\n    <div *ngSwitchCase=\"'input'\">\r\n      <mat-form-field [hintLabel]=\"question.hintLabel\" class=\"full-width\">\r\n        <input matInput [formControlName]=\"question.key\" [id]=\"question.key\" [type]=\"question.dataType\" [placeholder]=\"question.label\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <!-- Radio button -->\r\n    <div class=\"padding\" *ngSwitchCase=\"'radio'\">\r\n      <label>{{question.label}}</label>\r\n      <mat-radio-group [formControlName]=\"question.key\">\r\n        <mat-radio-button *ngFor=\"let option of question.options \" color=\"primary\" class=\"side-margin\" [value]=\"option.key\">{{option.value}}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <!-- Checkboxes -->\r\n    <div *ngSwitchCase=\"'checkbox'\">\r\n      <mat-checkbox class=\"side-margin\" [formControlName]=\"question.key\" [(ngModel)]=\"question.value\">{{question.label}}</mat-checkbox>\r\n    </div>\r\n\r\n    <!-- Dropdown -->\r\n    <mat-form-field *ngSwitchCase=\"'select'\">\r\n      <mat-select [id]=\"question.key\" [placeholder]=\"question.label\" [formControlName]=\"question.key\" [ngModel]=\"question.value\">\r\n        <mat-option *ngFor=\"let option of question.options\" [value]=\"option.key\">\r\n          {{ option.value }}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-hint>{{question.hintLabel }}</mat-hint>\r\n    </mat-form-field>\r\n\r\n    <!-- Checkbox group -->\r\n    <div [formGroupName]=\"question.key\" *ngSwitchCase=\"'checkboxGroup'\">\r\n      <div class=\"container\">\r\n        <label>{{question.label}}</label>\r\n        <div *ngFor=\"let option of question.options\" flex=\"20\">\r\n          <mat-checkbox class=\"side-margin\" [formControlName]=\"option.key\" [(ngModel)]=option.value>{{option.label}}</mat-checkbox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [\r\n    `.full-width {\r\n        width: 100%\r\n      }\r\n      .side-margin {\r\n        margin: 0 10px;\r\n      }\r\n      .padding {\r\n        padding-bottom: 1.25em;\r\n      }\r\n      .container {\r\n        display: flex;\r\n      }\r\n      `,\r\n  ],\r\n})\r\nexport class DynamicFormQuestionComponent {\r\n  @Input() question: FormControlBase<any>;\r\n  @Input() form: FormGroup;\r\n\r\n\r\n}\r\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlBase } from '../../form-controls/form-control-base';\r\nimport { FormControlService } from '../../form-controls/form-control.service';\r\n\r\n@Component({\r\n  selector: 'angular-form-viewer',\r\n  template: `<div *ngFor=\"let question of questions\">\r\n    <app-question [question]=\"question\" [form]=\"form\"></app-question>\r\n</div>`,\r\n  providers: [FormControlService],\r\n})\r\nexport class FormViewerComponent implements OnInit {\r\n  @Input() questions: FormControlBase<any>[] = [];\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private qcs: FormControlService) {}\r\n\r\n  ngOnInit() {\r\n    this.questions.forEach(question => {\r\n      question.disabled = true;\r\n      question.hintLabel = null;\r\n    });\r\n    this.form = this.qcs.toFormGroup(this.questions);\r\n  }\r\n}\r\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlBase } from '../../form-controls/form-control-base';\r\nimport { FormControlService } from '../../form-controls/form-control.service';\r\n\r\n@Component({\r\n  selector: 'angular-form-builder',\r\n  template: `<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>\r\n      <b>{{title}}</b>\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <form (ngSubmit)=\"formSubmit.emit(form)\" [formGroup]=\"form\">\r\n    <mat-card-content>\r\n      <div *ngFor=\"let question of questions\">\r\n        <app-question [question]=\"question\" [form]=\"form\"></app-question>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <button id=submit type=\"submit\" mat-button [disabled]=\"!form.valid || disableButtons\">SAVE</button>\r\n      <button [disabled]=\"disableButtons\" type=\"button\" mat-button (click)=\"onReset()\">RESET</button>\r\n      <ng-content></ng-content>\r\n    </mat-card-actions>\r\n  </form>\r\n</mat-card>`,\r\n  providers: [FormControlService],\r\n})\r\nexport class FormBuilderComponent implements OnInit {\r\n  @Input() title: string;\r\n  @Input() questions: FormControlBase<any>[] = [];\r\n  @Input() disableButtons = false;\r\n  @Output() formSubmit = new EventEmitter<any>();\r\n  @Output() formReset = new EventEmitter<any>();\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private qcs: FormControlService) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.qcs.toFormGroup(this.questions);\r\n  }\r\n\r\n  onReset() {\r\n    this.form.reset();\r\n    this.form = this.qcs.toFormGroup(this.questions);\r\n    this.formReset.emit(this.form);\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n  ValidatorFn,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { FormControlBase, Validator } from './form-control-base';\r\n\r\n@Injectable()\r\nexport class FormControlService {\r\n  validators = {\r\n    email: () => Validators.email,\r\n    required: () => Validators.required,\r\n    min: min => Validators.min(min),\r\n    max: max => Validators.max(max),\r\n    pattern: pattern => Validators.pattern(pattern),\r\n    minLength: minLength => Validators.minLength(minLength),\r\n    maxLength: maxLength => Validators.maxLength(maxLength),\r\n  };\r\n\r\n  constructor() { }\r\n\r\n  toFormGroup(questions: FormControlBase<any>[]) {\r\n    const group: any = {};\r\n    questions.forEach(question =>\r\n      question.controlType == 'checkboxGroup' ?\r\n        group[question.key] = this.createFormGroup(question) : group[question.key] = this.createFormControl(question)\r\n    );\r\n    return new FormGroup(group);\r\n  }\r\n\r\n  createFormControl(question: any) {\r\n    const state = {\r\n      value: question.value || '',\r\n      disabled: question.disabled,\r\n    };\r\n    let validatorOpts: ValidatorFn[] | null;\r\n    if (question.validators) {\r\n      validatorOpts = this.getValidators(question.validators);\r\n    }\r\n    return new FormControl(state, validatorOpts);\r\n  }\r\n\r\n  createFormGroup(question: FormControlBase<any>) {\r\n    const group: any = {};\r\n    question.options.forEach(option => {\r\n      const obj = {\r\n        key: option.key,\r\n        value: option.value,\r\n        disabled: question.disabled,\r\n        validators: question.validators,\r\n      };\r\n      group[option.key] = this.createFormControl(obj);\r\n    });\r\n    return new FormGroup(group);\r\n  }\r\n\r\n  getValidators(validators: Validator) {\r\n    const validatorOpts = new Array<ValidatorFn>();\r\n    Object.keys(validators).forEach(key => {\r\n      if (validators[key]) {\r\n        validatorOpts.push(this.validators[key](validators[key]));\r\n      }\r\n    });\r\n    return validatorOpts;\r\n  }\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
