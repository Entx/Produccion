import { Injectable, Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule, MatCheckboxModule, MatCardModule, MatRadioModule, MatSelectModule } from '@angular/material';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { CommonModule } from '@angular/common';

var FormControlService = /** @class */ (function () {
    function FormControlService() {
        this.validators = {
            email: function () { return Validators.email; },
            required: function () { return Validators.required; },
            min: function (min) { return Validators.min(min); },
            max: function (max) { return Validators.max(max); },
            pattern: function (pattern) { return Validators.pattern(pattern); },
            minLength: function (minLength) { return Validators.minLength(minLength); },
            maxLength: function (maxLength) { return Validators.maxLength(maxLength); },
        };
    }
    FormControlService.prototype.toFormGroup = function (questions) {
        var _this = this;
        var group = {};
        questions.forEach(function (question) { return question.controlType == 'checkboxGroup' ?
            group[question.key] = _this.createFormGroup(question) : group[question.key] = _this.createFormControl(question); });
        return new FormGroup(group);
    };
    FormControlService.prototype.createFormControl = function (question) {
        var state = {
            value: question.value || '',
            disabled: question.disabled,
        };
        var validatorOpts;
        if (question.validators) {
            validatorOpts = this.getValidators(question.validators);
        }
        return new FormControl(state, validatorOpts);
    };
    FormControlService.prototype.createFormGroup = function (question) {
        var _this = this;
        var group = {};
        question.options.forEach(function (option) {
            var obj = {
                key: option.key,
                value: option.value,
                disabled: question.disabled,
                validators: question.validators,
            };
            group[option.key] = _this.createFormControl(obj);
        });
        return new FormGroup(group);
    };
    FormControlService.prototype.getValidators = function (validators) {
        var _this = this;
        var validatorOpts = new Array();
        Object.keys(validators).forEach(function (key) {
            if (validators[key]) {
                validatorOpts.push(_this.validators[key](validators[key]));
            }
        });
        return validatorOpts;
    };
    return FormControlService;
}());
FormControlService.decorators = [
    { type: Injectable },
];
FormControlService.ctorParameters = function () { return []; };
var FormBuilderComponent = /** @class */ (function () {
    function FormBuilderComponent(qcs) {
        this.qcs = qcs;
        this.questions = [];
        this.disableButtons = false;
        this.formSubmit = new EventEmitter();
        this.formReset = new EventEmitter();
    }
    FormBuilderComponent.prototype.ngOnInit = function () {
        this.form = this.qcs.toFormGroup(this.questions);
    };
    FormBuilderComponent.prototype.onReset = function () {
        this.form.reset();
        this.form = this.qcs.toFormGroup(this.questions);
        this.formReset.emit(this.form);
    };
    return FormBuilderComponent;
}());
FormBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-form-builder',
                template: "<mat-card>\n  <mat-card-header>\n    <mat-card-title>\n      <b>{{title}}</b>\n    </mat-card-title>\n  </mat-card-header>\n  <form (ngSubmit)=\"formSubmit.emit(form)\" [formGroup]=\"form\">\n    <mat-card-content>\n      <div *ngFor=\"let question of questions\">\n        <app-question [question]=\"question\" [form]=\"form\"></app-question>\n      </div>\n    </mat-card-content>\n    <mat-card-actions>\n      <button id=submit type=\"submit\" mat-button [disabled]=\"!form.valid || disableButtons\">SAVE</button>\n      <button [disabled]=\"disableButtons\" type=\"button\" mat-button (click)=\"onReset()\">RESET</button>\n      <ng-content></ng-content>\n    </mat-card-actions>\n  </form>\n</mat-card>",
                providers: [FormControlService],
            },] },
];
FormBuilderComponent.ctorParameters = function () { return [
    { type: FormControlService, },
]; };
FormBuilderComponent.propDecorators = {
    "title": [{ type: Input },],
    "questions": [{ type: Input },],
    "disableButtons": [{ type: Input },],
    "formSubmit": [{ type: Output },],
    "formReset": [{ type: Output },],
};
var FormViewerComponent = /** @class */ (function () {
    function FormViewerComponent(qcs) {
        this.qcs = qcs;
        this.questions = [];
    }
    FormViewerComponent.prototype.ngOnInit = function () {
        this.questions.forEach(function (question) {
            question.disabled = true;
            question.hintLabel = null;
        });
        this.form = this.qcs.toFormGroup(this.questions);
    };
    return FormViewerComponent;
}());
FormViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-form-viewer',
                template: "<div *ngFor=\"let question of questions\">\n    <app-question [question]=\"question\" [form]=\"form\"></app-question>\n</div>",
                providers: [FormControlService],
            },] },
];
FormViewerComponent.ctorParameters = function () { return [
    { type: FormControlService, },
]; };
FormViewerComponent.propDecorators = {
    "questions": [{ type: Input },],
};
var DynamicFormQuestionComponent = /** @class */ (function () {
    function DynamicFormQuestionComponent() {
    }
    return DynamicFormQuestionComponent;
}());
DynamicFormQuestionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-question',
                template: "<div [formGroup]=\"form\">\n  <div [ngSwitch]=\"question.controlType\">\n    <!-- Input field -->\n    <div *ngSwitchCase=\"'input'\">\n      <mat-form-field [hintLabel]=\"question.hintLabel\" class=\"full-width\">\n        <input matInput [formControlName]=\"question.key\" [id]=\"question.key\" [type]=\"question.dataType\" [placeholder]=\"question.label\">\n      </mat-form-field>\n    </div>\n    <!-- Radio button -->\n    <div class=\"padding\" *ngSwitchCase=\"'radio'\">\n      <label>{{question.label}}</label>\n      <mat-radio-group [formControlName]=\"question.key\">\n        <mat-radio-button *ngFor=\"let option of question.options \" color=\"primary\" class=\"side-margin\" [value]=\"option.key\">{{option.value}}</mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <!-- Checkboxes -->\n    <div *ngSwitchCase=\"'checkbox'\">\n      <mat-checkbox class=\"side-margin\" [formControlName]=\"question.key\" [(ngModel)]=\"question.value\">{{question.label}}</mat-checkbox>\n    </div>\n    <!-- Dropdown -->\n    <mat-form-field *ngSwitchCase=\"'select'\">\n      <mat-select [id]=\"question.key\" [placeholder]=\"question.label\" [formControlName]=\"question.key\" [ngModel]=\"question.value\">\n        <mat-option *ngFor=\"let option of question.options\" [value]=\"option.key\">\n          {{ option.value }}\n        </mat-option>\n      </mat-select>\n      <mat-hint>{{question.hintLabel }}</mat-hint>\n    </mat-form-field>\n    <!-- Checkbox group -->\n    <div [formGroupName]=\"question.key\" *ngSwitchCase=\"'checkboxGroup'\">\n      <div class=\"container\">\n        <label>{{question.label}}</label>\n        <div *ngFor=\"let option of question.options\" flex=\"20\">\n          <mat-checkbox class=\"side-margin\" [formControlName]=\"option.key\" [(ngModel)]=option.value>{{option.label}}</mat-checkbox>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                styles: [
                    ".full-width {\n        width: 100%\n      }\n      .side-margin {\n        margin: 0 10px;\n      }\n      .padding {\n        padding-bottom: 1.25em;\n      }\n      .container {\n        display: flex;\n      }\n      ",
                ],
            },] },
];
DynamicFormQuestionComponent.ctorParameters = function () { return []; };
DynamicFormQuestionComponent.propDecorators = {
    "question": [{ type: Input },],
    "form": [{ type: Input },],
};
var AppMaterialModule = /** @class */ (function () {
    function AppMaterialModule() {
    }
    return AppMaterialModule;
}());
AppMaterialModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    MatButtonModule,
                    MatCheckboxModule,
                    MatCardModule,
                    MatInputModule,
                    MatFormFieldModule,
                    MatRadioModule,
                    MatSelectModule,
                ],
                exports: [
                    MatButtonModule,
                    MatCheckboxModule,
                    MatCardModule,
                    MatInputModule,
                    MatFormFieldModule,
                    MatRadioModule,
                    MatSelectModule,
                ],
            },] },
];
AppMaterialModule.ctorParameters = function () { return []; };
var FormBuilderModule = /** @class */ (function () {
    function FormBuilderModule() {
    }
    return FormBuilderModule;
}());
FormBuilderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ReactiveFormsModule, AppMaterialModule],
                declarations: [
                    FormBuilderComponent,
                    DynamicFormQuestionComponent,
                    FormViewerComponent,
                ],
                exports: [FormBuilderComponent, FormViewerComponent],
            },] },
];
FormBuilderModule.ctorParameters = function () { return []; };

export { FormBuilderModule, AppMaterialModule as ɵa, FormBuilderComponent as ɵb, FormViewerComponent as ɵe, DynamicFormQuestionComponent as ɵd, FormControlService as ɵc };
//# sourceMappingURL=angular-form-builder.js.map
