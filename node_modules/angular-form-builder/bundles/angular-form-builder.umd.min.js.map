{
  "version": 3,
  "file": "angular-form-builder.umd.min.js",
  "sources": [
    "ng://angular-form-builder/out/src/app/modules/form-builder/form-controls/form-control.service.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/components/form-builder/form-builder.component.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/components/form-viewer/form-viewer.component.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/dynamic-form-question/dynamic-form-question.component.ts",
    "ng://angular-form-builder/out/src/app/modules/app-material.module.ts",
    "ng://angular-form-builder/out/src/app/modules/form-builder/form-builder.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n  ValidatorFn,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { FormControlBase, Validator } from './form-control-base';\r\n\r\n@Injectable()\r\nexport class FormControlService {\r\n  validators = {\r\n    email: () => Validators.email,\r\n    required: () => Validators.required,\r\n    min: min => Validators.min(min),\r\n    max: max => Validators.max(max),\r\n    pattern: pattern => Validators.pattern(pattern),\r\n    minLength: minLength => Validators.minLength(minLength),\r\n    maxLength: maxLength => Validators.maxLength(maxLength),\r\n  };\r\n\r\n  constructor() { }\r\n\r\n  toFormGroup(questions: FormControlBase<any>[]) {\r\n    const group: any = {};\r\n    questions.forEach(question =>\r\n      question.controlType == 'checkboxGroup' ?\r\n        group[question.key] = this.createFormGroup(question) : group[question.key] = this.createFormControl(question)\r\n    );\r\n    return new FormGroup(group);\r\n  }\r\n\r\n  createFormControl(question: any) {\r\n    const state = {\r\n      value: question.value || '',\r\n      disabled: question.disabled,\r\n    };\r\n    let validatorOpts: ValidatorFn[] | null;\r\n    if (question.validators) {\r\n      validatorOpts = this.getValidators(question.validators);\r\n    }\r\n    return new FormControl(state, validatorOpts);\r\n  }\r\n\r\n  createFormGroup(question: FormControlBase<any>) {\r\n    const group: any = {};\r\n    question.options.forEach(option => {\r\n      const obj = {\r\n        key: option.key,\r\n        value: option.value,\r\n        disabled: question.disabled,\r\n        validators: question.validators,\r\n      };\r\n      group[option.key] = this.createFormControl(obj);\r\n    });\r\n    return new FormGroup(group);\r\n  }\r\n\r\n  getValidators(validators: Validator) {\r\n    const validatorOpts = new Array<ValidatorFn>();\r\n    Object.keys(validators).forEach(key => {\r\n      if (validators[key]) {\r\n        validatorOpts.push(this.validators[key](validators[key]));\r\n      }\r\n    });\r\n    return validatorOpts;\r\n  }\r\n}\r\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlBase } from '../../form-controls/form-control-base';\r\nimport { FormControlService } from '../../form-controls/form-control.service';\r\n\r\n@Component({\r\n  selector: 'angular-form-builder',\r\n  template: `<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>\r\n      <b>{{title}}</b>\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <form (ngSubmit)=\"formSubmit.emit(form)\" [formGroup]=\"form\">\r\n    <mat-card-content>\r\n      <div *ngFor=\"let question of questions\">\r\n        <app-question [question]=\"question\" [form]=\"form\"></app-question>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <button id=submit type=\"submit\" mat-button [disabled]=\"!form.valid || disableButtons\">SAVE</button>\r\n      <button [disabled]=\"disableButtons\" type=\"button\" mat-button (click)=\"onReset()\">RESET</button>\r\n      <ng-content></ng-content>\r\n    </mat-card-actions>\r\n  </form>\r\n</mat-card>`,\r\n  providers: [FormControlService],\r\n})\r\nexport class FormBuilderComponent implements OnInit {\r\n  @Input() title: string;\r\n  @Input() questions: FormControlBase<any>[] = [];\r\n  @Input() disableButtons = false;\r\n  @Output() formSubmit = new EventEmitter<any>();\r\n  @Output() formReset = new EventEmitter<any>();\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private qcs: FormControlService) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.qcs.toFormGroup(this.questions);\r\n  }\r\n\r\n  onReset() {\r\n    this.form.reset();\r\n    this.form = this.qcs.toFormGroup(this.questions);\r\n    this.formReset.emit(this.form);\r\n  }\r\n}\r\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlBase } from '../../form-controls/form-control-base';\r\nimport { FormControlService } from '../../form-controls/form-control.service';\r\n\r\n@Component({\r\n  selector: 'angular-form-viewer',\r\n  template: `<div *ngFor=\"let question of questions\">\r\n    <app-question [question]=\"question\" [form]=\"form\"></app-question>\r\n</div>`,\r\n  providers: [FormControlService],\r\n})\r\nexport class FormViewerComponent implements OnInit {\r\n  @Input() questions: FormControlBase<any>[] = [];\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private qcs: FormControlService) {}\r\n\r\n  ngOnInit() {\r\n    this.questions.forEach(question => {\r\n      question.disabled = true;\r\n      question.hintLabel = null;\r\n    });\r\n    this.form = this.qcs.toFormGroup(this.questions);\r\n  }\r\n}\r\n",
    "import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlBase } from '../form-controls/form-control-base';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  template: `<div [formGroup]=\"form\">\r\n\r\n  <div [ngSwitch]=\"question.controlType\">\r\n\r\n    <!-- Input field -->\r\n    <div *ngSwitchCase=\"'input'\">\r\n      <mat-form-field [hintLabel]=\"question.hintLabel\" class=\"full-width\">\r\n        <input matInput [formControlName]=\"question.key\" [id]=\"question.key\" [type]=\"question.dataType\" [placeholder]=\"question.label\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <!-- Radio button -->\r\n    <div class=\"padding\" *ngSwitchCase=\"'radio'\">\r\n      <label>{{question.label}}</label>\r\n      <mat-radio-group [formControlName]=\"question.key\">\r\n        <mat-radio-button *ngFor=\"let option of question.options \" color=\"primary\" class=\"side-margin\" [value]=\"option.key\">{{option.value}}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <!-- Checkboxes -->\r\n    <div *ngSwitchCase=\"'checkbox'\">\r\n      <mat-checkbox class=\"side-margin\" [formControlName]=\"question.key\" [(ngModel)]=\"question.value\">{{question.label}}</mat-checkbox>\r\n    </div>\r\n\r\n    <!-- Dropdown -->\r\n    <mat-form-field *ngSwitchCase=\"'select'\">\r\n      <mat-select [id]=\"question.key\" [placeholder]=\"question.label\" [formControlName]=\"question.key\" [ngModel]=\"question.value\">\r\n        <mat-option *ngFor=\"let option of question.options\" [value]=\"option.key\">\r\n          {{ option.value }}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-hint>{{question.hintLabel }}</mat-hint>\r\n    </mat-form-field>\r\n\r\n    <!-- Checkbox group -->\r\n    <div [formGroupName]=\"question.key\" *ngSwitchCase=\"'checkboxGroup'\">\r\n      <div class=\"container\">\r\n        <label>{{question.label}}</label>\r\n        <div *ngFor=\"let option of question.options\" flex=\"20\">\r\n          <mat-checkbox class=\"side-margin\" [formControlName]=\"option.key\" [(ngModel)]=option.value>{{option.label}}</mat-checkbox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [\r\n    `.full-width {\r\n        width: 100%\r\n      }\r\n      .side-margin {\r\n        margin: 0 10px;\r\n      }\r\n      .padding {\r\n        padding-bottom: 1.25em;\r\n      }\r\n      .container {\r\n        display: flex;\r\n      }\r\n      `,\r\n  ],\r\n})\r\nexport class DynamicFormQuestionComponent {\r\n  @Input() question: FormControlBase<any>;\r\n  @Input() form: FormGroup;\r\n\r\n\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport {\r\n  MatButtonModule,\r\n  MatCheckboxModule,\r\n  MatCardModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n} from '@angular/material';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n  ],\r\n  exports: [\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n  ],\r\n})\r\nexport class AppMaterialModule { }\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilderComponent } from './components/form-builder/form-builder.component';\r\nimport { FormViewerComponent } from './components/form-viewer/form-viewer.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { DynamicFormQuestionComponent } from './dynamic-form-question/dynamic-form-question.component';\r\nimport { AppMaterialModule } from '../app-material.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule, AppMaterialModule],\r\n  declarations: [\r\n    FormBuilderComponent,\r\n    DynamicFormQuestionComponent,\r\n    FormViewerComponent,\r\n  ],\r\n  exports: [FormBuilderComponent, FormViewerComponent],\r\n})\r\nexport class FormBuilderModule {}\r\n"
  ],
  "names": [
    "FormControlService",
    "this",
    "validators",
    "email",
    "Validators",
    "required",
    "min",
    "max",
    "pattern",
    "minLength",
    "maxLength",
    "prototype",
    "toFormGroup",
    "questions",
    "_this",
    "group",
    "forEach",
    "question",
    "controlType",
    "key",
    "createFormGroup",
    "createFormControl",
    "FormGroup",
    "validatorOpts",
    "state",
    "value",
    "disabled",
    "getValidators",
    "FormControl",
    "options",
    "option",
    "obj",
    "Array",
    "Object",
    "keys",
    "push",
    "type",
    "Injectable",
    "FormBuilderComponent",
    "qcs",
    "disableButtons",
    "formSubmit",
    "EventEmitter",
    "formReset",
    "ngOnInit",
    "form",
    "onReset",
    "reset",
    "emit",
    "Component",
    "args",
    "selector",
    "template",
    "providers",
    "title",
    "Input",
    "Output",
    "FormViewerComponent",
    "hintLabel",
    "DynamicFormQuestionComponent",
    "styles",
    "AppMaterialModule",
    "NgModule",
    "imports",
    "MatButtonModule",
    "MatCheckboxModule",
    "MatCardModule",
    "MatInputModule",
    "MatFormFieldModule",
    "MatRadioModule",
    "MatSelectModule",
    "exports",
    "FormBuilderModule",
    "CommonModule",
    "ReactiveFormsModule",
    "declarations"
  ],
  "mappings": "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"
}
